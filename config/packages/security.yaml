framework:
  rate_limiter:
    authenticated_api:
      policy: 'sliding_window'
      limit: 10
      interval: '1 minute'

security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  enable_authenticator_manager: true
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      login_throttling:
        max_attempts: 5
      pattern: ^/api/login
      json_login:
        check_path: /api/login_check
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        success_handler: lexik_jwt_authentication.handler.authentication_success
      form_login:
        check_path: /api/login_check_form
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        success_handler: lexik_jwt_authentication.handler.authentication_success
    api:
      pattern: ^/api
      stateless: true
      jwt: ~
    main:
      lazy: true
      provider: app_user_provider
      form_login:
        login_path: app_login
        check_path: app_login
      logout:
        path: app_logout
      switch_user: true
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  role_hierarchy:
    ROLE_ADMIN: [ ROLE_USER, ROLE_ALLOWED_TO_SWITCH ]
    ROLE_PROJECT_LEAD: ROLE_USER
    ROLE_TEAM_LEAD: ROLE_USER
  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/register, roles: PUBLIC_ACCESS }
    - { path: ^/admin, roles: PUBLIC_ACCESS }
    - {
        path: ^/employee/check-vacation-requests,
        roles: [ ROLE_TEAM_LEAD, ROLE_PROJECT_LEAD ]
      }
    - { path: ^/employee, roles: ROLE_USER }
    - { path: ^/vacation/request, roles: ROLE_USER }
    - { path: ^/vacation/remove, roles: ROLE_USER }
    - {
        path: ^/vacation/project-lead-grant,
        roles: ROLE_PROJECT_LEAD
      }
    - {
        path: ^/vacation/project-lead-reject,
        roles: ROLE_PROJECT_LEAD
      }
    - { path: ^/vacation/team-lead-grant, roles: ROLE_TEAM_LEAD }
    - {
        path: ^/vacation/team-lead-reject,
        roles: ROLE_TEAM_LEAD
      }
    - { path: ^/, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
